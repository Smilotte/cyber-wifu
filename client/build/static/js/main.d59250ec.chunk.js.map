{"version":3,"sources":["pages/chatbox/Chatbox.js","App.js","reportWebVitals.js","index.js"],"names":["Chatbox","props","submit","bind","e","preventDefault","chatWindowMessage","document","querySelector","console","log","value","message","this","handleMessage","handleReply","axios","get","responseType","params","text","then","data","context","window","AudioContext","webkitAudioContext","decodeAudioData","buffer","source","createBufferSource","connect","destination","start","catch","error","chatThread","chatNewThread","createElement","className","chatNewMessage","createTextNode","appendChild","scrollTop","scrollHeight","reply","getVoice","onSubmit","name","type","autoComplete","autoFocus","React","Component","loadLive2DModel","sayHello","transitionTime","models","path","stageStyle","width","height","tips","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oRAsIeA,EA9HF,kDAET,WAAYC,GAAQ,IAAD,EAEsB,OAFtB,qBACf,cAAMA,IACDC,OAAS,EAAKA,OAAOC,KAAK,gBAAM,CACzC,CAsHC,OApHD,mCACA,SAAOC,GACHA,EAAEC,iBAEF,IAAMC,EAAoBC,SAASC,cAAc,wBACjDC,QAAQC,IAAIJ,EAAkBK,OAE9B,IAAMC,EAAUN,EAAkBK,MAClB,KAAZC,IACAC,KAAKC,cAAcF,GACnBC,KAAKE,YAAYH,GAKzB,GAAC,sBAED,SAASA,GAELI,IAAMC,IAAI,6CAA8C,CACpDC,aAAc,cACdC,OAAQ,CAACC,KAAMR,KAEdS,MAAK,SAACC,GACH,IAAMC,EAAU,IAAKC,OAAOC,cAAgBD,OAAOE,oBACnDH,EAAQI,gBAAgBL,EAAKA,MAAM,SAAUM,GACzC,IAAMC,EAASN,EAAQO,qBACvBD,EAAOD,OAASA,EAChBC,EAAOE,QAAQR,EAAQS,aAEvBH,EAAOI,MAAM,EACjB,GACJ,IACCC,OAAM,SAAAC,GAAK,OAAI1B,QAAQC,IAAIyB,EAAM,GAC1C,GAAC,2BAGD,SAAcvB,GACV,IAAMwB,EAAa7B,SAASC,cAAc,gBACpCF,EAAoBC,SAASC,cAAc,wBAE3C6B,EAAgB9B,SAAS+B,cAAc,MAC7CD,EAAcE,UAAY,YAC1B,IAAMC,EAAiBjC,SAASkC,eAAe7B,GAG/CyB,EAAcK,YAAYF,GAC1BJ,EAAWM,YAAYL,GACvBD,EAAWO,UAAYP,EAAWQ,aAGlCtC,EAAkBK,MAAQ,EAC9B,GAsBA,yBAEA,SAAYC,GAAU,IAAD,OAEjBI,IAAMC,IAAI,4CAA6C,CACnDC,aAAc,OACdC,OAAQ,CAACC,KAAMR,KAEdS,MAAK,SAACC,GACHb,QAAQC,IAAIY,EAAKA,MACjB,IAAMuB,EAAQvB,EAAKA,KACnB,GAAc,KAAVuB,EAAc,CACd,EAAKC,SAASD,GACd,IAAMT,EAAa7B,SAASC,cAAc,gBACpC6B,EAAgB9B,SAAS+B,cAAc,MAC7CD,EAAcE,UAAY,cAC1B,IAAMC,EAAiBjC,SAASkC,eAAeI,GAG/CR,EAAcK,YAAYF,GAC1BJ,EAAWM,YAAYL,GACvBD,EAAWO,UAAYP,EAAWQ,YACtC,CACJ,IACCV,OAAM,SAAAC,GAAK,OAAI1B,QAAQC,IAAIyB,EAAM,GAC1C,GAEA,oBAIA,WACI,OACI,sBAAKI,UAAU,WAAU,UACrB,oBAAIA,UAAU,gBAEd,sBAAMA,UAAU,cAAcQ,SAAUlC,KAAKX,OAAO,SAChD,uBAAOqC,UAAU,sBAAsBS,KAAK,sBAAsBC,KAAK,OAAOC,aAAa,MACpFC,WAAS,QAIhC,KAAC,EA3HQ,CAASC,IAAMC,W,QCC5BC,YAAgB,CACZC,UAAU,EACVC,eAAgB,IAChB3B,OAAQ,sCACR4B,OAAQ,CACJC,KAAM,6BACNC,WAAY,CACRC,MAAO,OACPC,OAAQ,SAGhBC,MAAM,IACP,IAEGC,EAAG,kHASJ,OATI,mCAKL,WACI,OACI,cAAC,EAAO,GAEhB,KAAC,EATI,CAASX,IAAMC,WAYTU,ICvBAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECJAO,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENnE,SAASoE,eAAe,SAM1BX,G","file":"static/js/main.d59250ec.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Chatbox.css\"\nimport axios from \"axios\";\n\n/**\n * @author Smilotte\n * The page for Home. Main home page\n */\nclass Chatbox extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.submit = this.submit.bind(this);\n    }\n\n    // On form submit, send message\n    submit(e) {\n        e.preventDefault();\n\n        const chatWindowMessage = document.querySelector('.chat-window-message');\n        console.log(chatWindowMessage.value)\n\n        const message = chatWindowMessage.value;\n        if (message !== \"\") {\n            this.handleMessage(message);\n            this.handleReply(message);\n            // this.sendMessage(message);\n            // this.handleText();\n        }\n\n    };\n\n    getVoice(message) {\n        // axios.get('http://127.0.0.1:5000/audio', {\n        axios.get('http://cyberwifu.vipgz4.91tunnel.com/audio', {\n            responseType: \"arraybuffer\",\n            params: {text: message}\n        })\n            .then((data) => {\n                const context = new (window.AudioContext || window.webkitAudioContext)();\n                context.decodeAudioData(data.data, function (buffer) {\n                    const source = context.createBufferSource();\n                    source.buffer = buffer;\n                    source.connect(context.destination);\n                    // auto play\n                    source.start(0);\n                });\n            })\n            .catch(error => console.log(error));\n    }\n\n\n    handleMessage(message) {\n        const chatThread = document.querySelector('.chat-thread');\n        const chatWindowMessage = document.querySelector('.chat-window-message');\n\n        const chatNewThread = document.createElement(\"li\");\n        chatNewThread.className = \"senderMsg\"\n        const chatNewMessage = document.createTextNode(message);\n\n        // Add message to chat thread and scroll to bottom\n        chatNewThread.appendChild(chatNewMessage);\n        chatThread.appendChild(chatNewThread);\n        chatThread.scrollTop = chatThread.scrollHeight;\n\n        // Clear text value\n        chatWindowMessage.value = '';\n    }\n\n    // handleText() {\n    //     axios.get('http://127.0.0.1:5000/text', {\n    //         responseType: \"text\"\n    //     })\n    //         .then((data) => {\n    //             console.log(data.data);\n    //             const reply = data.data\n    //             if (reply !== \"\") {\n    //                 const chatThread = document.querySelector('.chat-thread');\n    //                 const chatNewThread = document.createElement(\"li\");\n    //                 chatNewThread.className = \"receiverMsg\"\n    //                 const chatNewMessage = document.createTextNode(reply);\n    //\n    //                 // Add message to chat thread and scroll to bottom\n    //                 chatNewThread.appendChild(chatNewMessage);\n    //                 chatThread.appendChild(chatNewThread);\n    //                 chatThread.scrollTop = chatThread.scrollHeight;\n    //             }\n    //         })\n    //         .catch(error => console.log(error));\n    // }\n\n    handleReply(message) {\n        // axios.get('http://127.0.0.1:5000/chat', {\n        axios.get('http://cyberwifu.vipgz4.91tunnel.com/chat', {\n            responseType: \"text\",\n            params: {text: message}\n        })\n            .then((data) => {\n                console.log(data.data);\n                const reply = data.data\n                if (reply !== \"\") {\n                    this.getVoice(reply);\n                    const chatThread = document.querySelector('.chat-thread');\n                    const chatNewThread = document.createElement(\"li\");\n                    chatNewThread.className = \"receiverMsg\"\n                    const chatNewMessage = document.createTextNode(reply);\n\n                    // Add message to chat thread and scroll to bottom\n                    chatNewThread.appendChild(chatNewMessage);\n                    chatThread.appendChild(chatNewThread);\n                    chatThread.scrollTop = chatThread.scrollHeight;\n                }\n            })\n            .catch(error => console.log(error));\n    }\n\n    /**\n     * render\n     * @returns {*}\n     */\n    render() {\n        return (\n            <div className=\"chat-box\">\n                <ul className=\"chat-thread\"/>\n\n                <form className=\"chat-window\" onSubmit={this.submit}>\n                    <input className=\"chat-window-message\" name=\"chat-window-message\" type=\"text\" autoComplete=\"off\"\n                           autoFocus/>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Chatbox;","import React from 'react';\nimport './App.css';\nimport Chatbox from \"./pages/chatbox/Chatbox\";\nimport {loadLive2DModel} from \"oh-my-live2d\";\n\n/**\n * @author Smilotte\n * The page for App. Main domain.\n */\nloadLive2DModel({\n    sayHello: false,\n    transitionTime: 2000,\n    source: \"build/assets/hiyori_pro_en/runtime/\",\n    models: {\n        path: \"hiyori_pro_t10.model3.json\",\n        stageStyle: {\n            width: 'auto',\n            height: 'auto'\n        }\n    },\n    tips: false\n});\n\nclass App extends React.Component {\n    /**\n     * The block for render and router. The main background is defined in App.css\n     * @returns {*}\n     */\n    render() {\n        return (\n            <Chatbox/>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}